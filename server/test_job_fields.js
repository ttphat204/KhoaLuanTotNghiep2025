const dbConnect = require('./utils/dbConnect');
const Jobs = require('./models/Jobs');
const Auth = require('./models/Auth');
const Categories = require('./models/Categories');

async function testJobFields() {
  try {
    await dbConnect();
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng');

    // Ki·ªÉm tra model Jobs c√≥ c√°c tr∆∞·ªùng m·ªõi
    const jobSchema = Jobs.schema.obj;
    console.log('\nüìã Ki·ªÉm tra c√°c tr∆∞·ªùng trong model Jobs:');
    console.log('‚úÖ quantity:', jobSchema.quantity ? 'C√≥' : 'Thi·∫øu');
    console.log('‚úÖ level:', jobSchema.level ? 'C√≥' : 'Thi·∫øu');
    console.log('‚úÖ experienceLevel:', jobSchema.experienceLevel ? 'C√≥' : 'Thi·∫øu');
    console.log('‚úÖ jobType:', jobSchema.jobType ? 'C√≥' : 'Thi·∫øu');
    console.log('‚úÖ location:', jobSchema.location ? 'C√≥' : 'Thi·∫øu');

    // Ki·ªÉm tra validation rules
    if (jobSchema.quantity) {
      console.log('‚úÖ quantity validation:', jobSchema.quantity.min ? `Min: ${jobSchema.quantity.min}` : 'Kh√¥ng c√≥ min');
    }
    if (jobSchema.level) {
      console.log('‚úÖ level enum:', jobSchema.level.enum?.values || 'Kh√¥ng c√≥ enum');
    }

    // T·∫°o job test ƒë·ªÉ ki·ªÉm tra
    console.log('\nüß™ T·∫°o job test...');
    
    // L·∫•y employer ƒë·∫ßu ti√™n
    const employer = await Auth.findOne({ role: 'employer' });
    if (!employer) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y employer n√†o');
      return;
    }

    // L·∫•y category ƒë·∫ßu ti√™n
    const category = await Categories.findOne();
    if (!category) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y category n√†o');
      return;
    }

    const testJob = new Jobs({
      employerId: employer._id,
      jobTitle: 'Test Job v·ªõi tr∆∞·ªùng m·ªõi',
      description: 'M√¥ t·∫£ test job',
      jobRequirements: 'Y√™u c·∫ßu c√¥ng vi·ªác chi ti·∫øt cho test job',
      requirements: ['Y√™u c·∫ßu 1', 'Y√™u c·∫ßu 2'],
      benefits: ['Quy·ªÅn l·ª£i 1', 'Quy·ªÅn l·ª£i 2'],
      salaryRange: {
        min: 10,
        max: 20,
        currency: 'VND'
      },
      location: {
        province: 'H√† N·ªôi',
        district: 'C·∫ßu Gi·∫•y',
        addressDetail: '123 ƒê∆∞·ªùng ABC'
      },
      jobType: 'Full-time',
      categoryId: category._id,
      skillsRequired: ['JavaScript', 'React', 'Node.js'],
      experienceLevel: '2-3 nƒÉm kinh nghi·ªám',
      quantity: 5,
      level: 'Nh√¢n vi√™n',
      applicationDeadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 ng√†y sau
      status: 'Active'
    });

    await testJob.save();
    console.log('‚úÖ T·∫°o job test th√†nh c√¥ng:', testJob._id);

    // Ki·ªÉm tra job ƒë√£ t·∫°o
    const savedJob = await Jobs.findById(testJob._id).populate('categoryId').populate('employerId');
    console.log('\nüìä Th√¥ng tin job ƒë√£ t·∫°o:');
    console.log('‚úÖ jobTitle:', savedJob.jobTitle);
    console.log('‚úÖ jobRequirements:', savedJob.jobRequirements);
    console.log('‚úÖ quantity:', savedJob.quantity);
    console.log('‚úÖ level:', savedJob.level);
    console.log('‚úÖ experienceLevel:', savedJob.experienceLevel);
    console.log('‚úÖ jobType:', savedJob.jobType);
    console.log('‚úÖ location:', savedJob.location);
    console.log('‚úÖ categoryId:', savedJob.categoryId?.name);
    console.log('‚úÖ employerId:', savedJob.employerId?.companyName);

    // X√≥a job test
    await Jobs.findByIdAndDelete(testJob._id);
    console.log('‚úÖ ƒê√£ x√≥a job test');

    console.log('\nüéâ T·∫•t c·∫£ c√°c tr∆∞·ªùng m·ªõi ƒë√£ ho·∫°t ƒë·ªông ƒë√∫ng!');

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
  } finally {
    process.exit(0);
  }
}

testJobFields(); 